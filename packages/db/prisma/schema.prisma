// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  walletAddress String  @unique
  task          Task[] // this is not a field to enter data, this is auto generated by primsa based on forign keys.
  count         Count[]
}

model Worker {
  id             String       @id @default(uuid())
  walletAddress  String       @unique
  submissions    Submission[]
  pending_amount Int
  locked_amount  Int
}

model Task {
  id          String       @id @default(uuid())
  user_id     String
  user        User         @relation(fields: [user_id], references: [id])
  title       String
  description String
  option      Options[]
  done        Boolean
  amount      Int
  Signature   String       @unique
  submission  Submission[]
}

model Options {
  id        String @id @default(uuid())
  image_url String
  option_id Int    @default(autoincrement()) // informs the user, which option is it. like 1, 2, 3 or 4
  task_id   String
  task      Task   @relation(fields: [task_id], references: [id])
}

model Submission {
  id        String @id @default(uuid())
  worker_id String
  worker    Worker @relation(fields: [worker_id], references: [id])
  option_id Int
  task_id   String
  task      Task   @relation(fields: [task_id], references: [id])

  @@unique([worker_id, task_id])
}

model Count {
  id              String @id @default(uuid())
  user_id         String
  user            User   @relation(fields: [user_id], references: [id])
  submissionCount Int
}
